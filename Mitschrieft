Übermitteln von Zahl an ASCII Zeichen:

Roboremo ermittelt Zahlenwert von z.b einem Schieberegler als ASCII-Zeichen mit einer vorhergehenden kennung die in der App eingestellt werden kann.(ID) 

--) Roboremo schickt Buchstabe mit kennung 

	'V_170 (-'

	Button schickt nur 'X (-'

	(-...Zeilenvorschub, ASCII-Code 13

Wenn wir uns drauf einigen die Kennung nur aus einem Buchstaben bestehen zu lassen,können bei Roboremo Anwendungen mit Buttons und Slider
nur 2 Fälle auftreten.

1.) Char+Enter; Button wurde betätigt.
2.) Char+Space; Slider wurde betätigt.
Wenn der Silder betätigt wurde müssen wir die Nachfolgenden Ziffern einlesen(ASCIIWert -48) und bei jeder neuen Ziffer den bisherigen Zahlenwert mit 10 multiplizieren und die ziffer addieren.solange bis \n kommt.

Zahl=0;
bei jeder neuen Ziffer:
Zahl= Zahl*10+Ziffer;

	Ziffer|Zahl
	      |0
	   1  | 0*10+1= 1
	   7  | 1*10+7= 17
	   0  | 17*10+0=170
     \n= ENTER| fertig

Wir müssen also einen Befehlsblock immer bis zum \n lesen bevor wir mit analogwrite die Geschwindigkeit setzten können.

	if(serial.avaiable() > 0)
	{
	Kennung = myserial.read();
	do
	{
	  while(Serial.avaiable == 0);  (*)
	 Zeichen =serial.read();
	if((Zeichen>=48) && (Zeichen<=57))
	{
	  Ziffer= Zeichen -48;
	  Zahl= Zahl*10+Ziffer;
	}
        }while(Zeichen!='\n');

Ob die Variable Zeichen als Char oder als Bit oder Int definiert wird ist egal, weil C beim Arbeiten mit Charaktern ohnehin mit dem ASCII Code Arbeitet. Nachteil dieser 2 Verschachtelten while schleifen:Einlesen eines Befehlsblocks bis zum \n blockiert den Ardoino. Wenn die Übertragung mitm im Block ganz abbricht bleibt der Ardoino ewig in der (*)-Schleife hängen.

AufgabenStellung:
6.)Mit 2 Bytes soll der motor vor und zurück laufen. 

7.)
 a.)
   Ohne Fernsteuerung:
   Motor soll jeweils 3sec lang mit 5 Unterschiedlichen Geschwindigkeiten laufen analogWrite(), und dabei bei jedem schritt die Richtung  
   wechseln. Achtung: beim umkehren der Drehrichtung muss Pin B auf High gelegt werden und vom PWM wert des Pins A von 255 abgezogen werden,
   weil jz Strom fließt wenn der Pin A low ist. 
 b.)
   Vom Robormo aus sollen sich mehrere Buttons unterschiedliche Geschwindigkeiten einstellen lassen. 


bsp. 
Schließe 5 Byte die eine ASCII bedeutung haben und darauf ein Bit mit der bedeutung einer Zahl.

I²C Wire:
Wire.begin() stehlt I²C(-Bus,für Singltranssysteme braucht man keine Adresse)

Wire.beginTransmission(Adresse)   }
Wire.write()                      }  Master sendet daten an slave      
Wire.endTransmission()            }

Wire.onreceiver(Name der ISR) (Aktivier den Interupt der Ausgelöst wird wenn der Slave Daten vom Master empfängt.
Wire.avaible
Wire.read

Wire.onrequest(Name der ISR) (Aktiviert den Interupt für Datenanfrage an den Slave 

Slavereciever:

Wenn Slave mit I²C Bus über seine Adresse angesprochen wird so löst das einen Interupt aus, der die Loop unterbricht. Die entsprechende Interupt service-routine muss sich um das einlesen der Daten kümmern.
im bsp.
Alle bis auf das letzte Byte werden als Charakter(Char) eingelesen, das letzte Byte als Integer.
Slave braucht nicht von vorrein wissen wie viele Bytes der Master sendet weil der Master die Übertragung mit einem Stop-Steuersignal abschließt.

bsp. Masterreader:

Master muss die Anzahl der Bytes die er vom Slave erhält von vornehinein wissen weil vom slave kein stopsignal kommt sondern dies immer durch den master erfolgt.

bsp. Slavesender:

Datenanfrage durch den Master löst einen Interupt aus indem der slave in der Interupt-serviceroutine die daten schickt.

bsp:

Master schickt an den Slave 1 Byte, dass die Blinkzeit der LED 13 des Slave in hunderstl sekunden angibt max.zeit 2,5 sekunden.
Master schickt alle 10 sekunden einen neuen wert für die Blinkzeit 1/2 Sekunde 1 Sekunde , 1,5 Sekunden , 2 Sekunden.



